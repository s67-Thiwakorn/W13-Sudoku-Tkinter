import tkinter as tk
from tkinter import messagebox, simpledialog
import random
import os

def create_sudoku_grid(root):
    canvas = tk.Canvas(root, width=450, height=450)
    canvas.grid(row=0, column=0, columnspan=9)

    canvas.create_line(0, 0, 450, 0, width=5)
    canvas.create_line(0, 0, 0, 450, width=5)

    for i in range(1, 9):
        line_width = 3 if i % 3 == 0 else 1
        canvas.create_line(50 * i, 0, 50 * i, 450, width=line_width)
        canvas.create_line(0, 50 * i, 450, 50 * i, width=line_width)

    entries = []
    for row in range(9):
        row_entries = []
        for col in range(9):
            e = tk.Entry(root, width=2, justify='center', font=('Arial', 18))
            e.place(x=50 * col + 5, y=50 * row + 5, width=40, height=40)
            row_entries.append(e)
        entries.append(row_entries)
    
    return entries

def check_valid_sudoku(board):
    for row in board:
        if not check_unique(row):
            return False
    for col in range(9):
        if not check_unique([board[row][col] for row in range(9)]):
            return False
    for box_row in range(0, 9, 3):
        for box_col in range(0, 9, 3):
            box = []
            for i in range(3):
                for j in range(3):
                    box.append(board[box_row + i][box_col + j])
            if not check_unique(box):
                return False
    return True

def check_unique(nums):
    nums = [num for num in nums if num != 0]
    return len(nums) == len(set(nums))

def check_sudoku(entries):
    board = []
    for row in entries:
        current_row = []
        for entry in row:
            value = entry.get()
            if value.isdigit():
                current_row.append(int(value))
            else:
                current_row.append(0)
        board.append(current_row)

    if check_valid_sudoku(board):
        print("Sudoku is valid!")
    else:
        print("Sudoku is invalid!")

def generate_sudoku():
    base = 3
    side = base * base
    nums = random.sample(range(1, base * base + 1), base * base)
    board = [[0 for _ in range(9)] for _ in range(9)]

    for i in range(9):
        for j in range(9):
            board[i][j] = nums[(i * base + i // base + j) % (base * base)]

    return board

def fill_sudoku(entries, board):
    for i in range(9):
        for j in range(9):
            entries[i][j].insert(0, str(board[i][j]))

def save_game(entries, username):
    if os.path.exists(f"{username}.txt"):
        messagebox.showwarning("ชื่อผู้ใช้ซ้ำ", "มีการใช้ชื่อนี้แล้ว กรุณาเปลี่ยนชื่อ")
        return

    board = []
    for row in entries:
        current_row = []
        for entry in row:
            value = entry.get()
            current_row.append(value if value.isdigit() else '0')
        board.append(current_row)
    
    with open(f"{username}.txt", "w") as file:
        for row in board:
            file.write(" ".join(row) + "\n")
    
    messagebox.showinfo("เซฟเกม", "เกมของคุณถูกบันทึกเรียบร้อยแล้ว!")

def load_game(entries, username):
    if os.path.exists(f"{username}.txt"):
        with open(f"{username}.txt", "r") as file:
            board = [line.strip().split() for line in file]
            for i in range(9):
                for j in range(9):
                    entries[i][j].delete(0, tk.END)
                    if board[i][j] == '0':
                        entries[i][j].insert(0, '')
                    else:
                        entries[i][j].insert(0, board[i][j])
                        entries[i][j].config(state='readonly')
    else:
        return False
    return True

def check_save_game():
    username = simpledialog.askstring("ชื่อผู้ใช้", "กรุณากรอกชื่อผู้ใช้:")
    if username:
        if load_game(entries, username):
            return username
        else:
            messagebox.showinfo("ไม่เจอเซฟเกม", "คุณไม่มีเซฟเกมนี้")
            return None
    else:
        messagebox.showinfo("ไม่เจอเซฟเกม", "คุณไม่มีเซฟเกมนี้")
        return None
        
def create_menu(root):
    menu_window = tk.Toplevel(root)
    menu_window.title("เลือกระดับความยาก")
    menu_window.geometry("250x150")

    tk.Label(menu_window, text="เลือกระดับความยาก:").pack()

    difficulties = ['ง่าย', 'ปานกลาง', 'ยาก']
    for difficulty in difficulties:
        button = tk.Button(menu_window, text=difficulty, command=lambda d=difficulty: start_game(d, root))
        button.pack(pady=5)

def start_game(difficulty, root):
    board = generate_sudoku(difficulty)
    fill_sudoku(entries, board)
    root.destroy()

def main():
    global entries, root
    root = tk.Tk()
    root.title("Sudoku")

    entries = create_sudoku_grid(root)

    username = check_save_game()
    if username:
        load_game(entries, username)
    else:
        create_menu()

    check_button = tk.Button(root, text="ตรวจสอบ", command=lambda: check_sudoku(entries))
    check_button.grid(row=9, column=2)

    save_button = tk.Button(root, text="เซฟเกม", command=lambda: save_game(entries, simpledialog.askstring("ชื่อผู้ใช้", "กรุณากรอกชื่อผู้ใช้:")))
    save_button.grid(row=1, column=8, sticky="e", padx=10)

    root.mainloop()

if __name__ == "__main__":
    main()
