import tkinter as tk
import random
import os

def main():
    root = tk.Tk()
    root.title("Sudoku Game")
    root.geometry("450x450")
    entries = create_sudoku_grid(root)

    board = generate_sudoku()
    fill_sudoku(entries, board)

    save_button = tk.Button(root, text="เซฟเกม", command=lambda: save_game(entries, 'sudoku_save.txt'))
    save_button.grid(row=9, column=0)

    load_button = tk.Button(root, text="โหลดเกม", command=lambda: load_game(entries, 'sudoku_save.txt'))
    load_button.grid(row=9, column=1)

    check_button = tk.Button(root, text="ตรวจสอบ", command=lambda: check_sudoku(entries))
    check_button.grid(row=9, column=2)

    root.mainloop()

def create_sudoku_grid(root):
    entries = []
    for row in range(9):
        row_entries = []
        for col in range(9):
            e = tk.Entry(root, width=2, justify='center', font=('Arial', 18))
            e.grid(row=row, column=col, padx=5, pady=5)
            row_entries.append(e)
        entries.append(row_entries)
    return entries

def check_valid_sudoku(board):
    for row in board:
        if not check_unique(row):
            return False
    for col in range(9):
        if not check_unique([board[row][col] for row in range(9)]):
            return False
    for box_row in range(0, 9, 3):
        for box_col in range(0, 9, 3):
            box = []
            for i in range(3):
                for j in range(3):
                    box.append(board[box_row + i][box_col + j])
            if not check_unique(box):
                return False
    return True

def check_unique(nums):
    nums = [num for num in nums if num != 0]
    return len(nums) == len(set(nums))

def check_sudoku(entries):
    board = []
    for row in entries:
        current_row = []
        for entry in row:
            value = entry.get()
            if value.isdigit():
                current_row.append(int(value))
            else:
                current_row.append(0)
        board.append(current_row)

    if check_valid_sudoku(board):
        print("Sudoku is valid!")
    else:
        print("Sudoku is invalid!")

def generate_sudoku():
    base = 3
    side = base * base
    nums = random.sample(range(1, base * base + 1), base * base)
    board = [[0 for _ in range(9)] for _ in range(9)]

    for i in range(9):
        for j in range(9):
            board[i][j] = nums[(i * base + i // base + j) % (base * base)]

    return board

def fill_sudoku(entries, board):
    for i in range(9):
        for j in range(9):
            entries[i][j].insert(0, str(board[i][j]))

import os

def save_game(entries, filename):
    with open(filename, 'w') as file:
        for row in entries:
            current_row = []
            for entry in row:
                current_row.append(entry.get() if entry.get().isdigit() else '0')
            file.write(' '.join(current_row) + '\n')

def load_game(entries, filename):
    if os.path.exists(filename):
        with open(filename, 'r') as file:
            for i, line in enumerate(file):
                values = line.strip().split()
                for j, value in enumerate(values):
                    entries[i][j].delete(0, tk.END)
                    entries[i][j].insert(0, value if value != '0' else '')

if __name__ == "__main__":
    main()
